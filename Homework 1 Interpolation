Exercise 4:

from scipy import *
from numpy import *
from scipy.linalg import solve

def createV(x):
    N=len(x)
    V=ones(len(x))
    for i in range(1,N):
        k=x**i
        V=column_stack((k,V))
    return V

print(createV(array([2,2,3,4,5])))
print(createV(array([0.0, 0.5, 1.0, 1.5, 2.0, 2.5])))


Exercise 5:

from scipy.linalg import solve
from scipy import *
from numpy import *

def interpoly(x,y):
    def createV(x):
        N=len(x)
        V=ones(len(x))
        for i in range(1,N):
            k=x**i
            V=column_stack((k,V))
        return V
    V=createV(x)
    y=y.reshape(len(y),1)
    return solve(V,y)

print(interpoly(array([1,0,2]), array([4,1,3])))
print(interpoly(array([0,.5,1,1.5,2,2.5]), array([-2,0.5,-2,1,-0.5,1])))

Exercise 6:

from scipy.linalg import solve
from scipy import *
from numpy import *


def polyval(x,y,z):
    def interpoly(x,y):
        def createV(x):
            N=len(x)
            V=ones(len(x))
            for i in range(1,N):
                k=x**i
                V=column_stack((k,V))
            return V
        V=createV(x)
        u=y.reshape(len(y),1)
        return solve(V,u)
    N=len(x)
    b=0
    for j in range(N): #z**((N-1)-i) since my N is actually N+1, but dont have to change in range since endpoint isnt included
        b=interpoly(x,y)[j,0]*z**((N-1)-j) + b
        print(b)
    return b


x=array([0.0, 0.5, 1.0, 1.5, 2.0, 2.5])
y=array([-2.0, 0.5, -2.0, 1.0, -0.5, 1.0])
print(polyval(x,y,0.6))

x=array([1,0,2])
y=array([4,1,3])
print(polyval(x,y,5))

Exercise 7:

from scipy.linalg import solve
from scipy import *
from numpy import *
from matplotlib.pyplot import *
%matplotlib inline  


def plotit(x,y,zlist):
    def polyval(x,y,z):
        def interpoly(x,y):
            def createV(x):
                N=len(x)
                V=ones(len(x))
                for i in range(1,N):
                    k=x**i
                    V=column_stack((k,V))
                return V
            V=createV(x)
            u=y.reshape(len(y),1)
            return solve(V,u)
        
        N=len(x)
        b=0
        for j in range(N): 
            b=interpoly(x,y)[j,0]*z**((N-1)-j) + b
        return b
    ylist=[]
    for z in zlist:
        f=polyval(x,y,z)
        ylist.append(f)
        b=0
    plot(zlist,ylist)
    xlabel('z values')
    ylabel('p(z)')
    plot(x,y,'ro')


x=array([0.0, 0.5, 1.0, 1.5, 2.0, 2.5])
y=array([-2.0, 0.5, -2.0, 1.0, -0.5, 1.0])
z=linspace(0,3,11)
plotit(x,y,z)
